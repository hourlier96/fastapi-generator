steps:
  - id: set-env
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - gcloud secrets versions access latest --secret=$_SERVICE --project=$PROJECT_ID > .env
  
  - id: get-img-cache
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker pull europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE:latest || exit 0']

  - id: build
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --cache-from
      - europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE
      - -t
      - europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE
      - -f
      - Dockerfile.prod
      - .

  - id: push
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE

  - id: tf-init
    name: hashicorp/terraform:latest
    entrypoint: sh
    args:
      - -c
      - cd iac && terraform init -backend-config="env/${_ENV}/backend.conf"

  - id: tf-apply
    name: hashicorp/terraform:latest
    entrypoint: sh
    args:
      - -c
      - cd iac && terraform apply --auto-approve

  - id: deploy
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud run deploy $_SERVICE \
        --project $PROJECT_ID \
        --image europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE \
        --allow-unauthenticated \
        --set-env-vars=PROJECT_ID=$PROJECT_ID \
        --region $_REGION \
        --add-cloudsql-instances $PROJECT_ID:$_REGION:$_SERVICE-instance \
        --timeout 3600

images:
  - europe-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE

substitutions:
  _REPO: "{{ cookiecutter.project_slug.replace('_', '-') }}-repository"
  _SERVICE: "{{ cookiecutter.project_slug.replace('_', '-') }}"
  _REGION: "{{ cookiecutter.gcloud_region }}"

options:
  logging: CLOUD_LOGGING_ONLY